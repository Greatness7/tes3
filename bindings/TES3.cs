// <auto-generated>
//
// This file was automatically generated by Interoptopus.
//
// Library:      tes3
// Hash:         0x639c07e9b2ba3261
// Namespace:    
// Builder:      interoptopus_backend_csharp (0.15.0-alpha.12)
//
// Do not edit this file manually.
//
// </auto-generated>

#pragma warning disable 0105
using System;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.CompilerServices;
using TES3;
#pragma warning restore 0105

namespace TES3
{
    public static partial class Interop
    {
        public const string NativeLib = "tes3";

        static Interop()
        {
        }



        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_create")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_string_create(IntPtr utf8, ulong len, ref Utf8String rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_destroy")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_string_destroy(Utf8String utf8);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_clone")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_string_clone(ref Utf8String utf8, ref Utf8String rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_create_15232377700523984591")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_create_15232377700523984591(IntPtr data, ulong len, ref VecNode rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_destroy_16552804768725066709")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_destroy_16552804768725066709(VecNode ignored);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_create_343285216292542189")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_create_343285216292542189(IntPtr data, ulong len, ref VecMesh rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_destroy_15967035986871743817")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_destroy_15967035986871743817(VecMesh ignored);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_create_7840575865880398252")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_create_7840575865880398252(IntPtr data, ulong len, ref VecVec2 rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_destroy_5533851024978863145")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_destroy_5533851024978863145(VecVec2 ignored);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_create_5844344253683601178")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_create_5844344253683601178(IntPtr data, ulong len, ref VecVec3 rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_destroy_16291794870355622680")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_destroy_16291794870355622680(VecVec3 ignored);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_create_10492799046080159930")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_create_10492799046080159930(IntPtr data, ulong len, ref VecVec4 rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_destroy_13936493366709289451")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_destroy_13936493366709289451(VecVec4 ignored);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_create_1589809616975759318")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_create_1589809616975759318(IntPtr data, ulong len, ref VecTriangle rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_vec_destroy_6823484863324545284")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial long interoptopus_vec_destroy_6823484863324545284(VecTriangle ignored);


        [LibraryImport(NativeLib, EntryPoint = "LoadScene")]
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static partial ResultSceneUtf8String LoadScene(Utf8String path);


    }

    public partial class Mesh
    {
        public Transform Transform;
        public Utf8String Texture;
        public VecVec3 Vertices;
        public VecTriangle Triangles;
        public VecVec3 Normals;
        public VecVec4 Colors;
        public VecVec2 UvSet0;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Mesh : IDisposable
    {
        public Mesh() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.Transform = Transform.ToUnmanaged();
            _unmanaged.Texture = Texture.IntoUnmanaged();
            _unmanaged.Vertices = Vertices.IntoUnmanaged();
            _unmanaged.Triangles = Triangles.IntoUnmanaged();
            _unmanaged.Normals = Normals.IntoUnmanaged();
            _unmanaged.Colors = Colors.IntoUnmanaged();
            _unmanaged.UvSet0 = UvSet0.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.Transform = Transform.ToUnmanaged();
            _unmanaged.Texture = Texture.AsUnmanaged();
            _unmanaged.Vertices = Vertices.AsUnmanaged();
            _unmanaged.Triangles = Triangles.AsUnmanaged();
            _unmanaged.Normals = Normals.AsUnmanaged();
            _unmanaged.Colors = Colors.AsUnmanaged();
            _unmanaged.UvSet0 = UvSet0.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Transform.Unmanaged Transform;
            public Utf8String.Unmanaged Texture;
            public VecVec3.Unmanaged Vertices;
            public VecTriangle.Unmanaged Triangles;
            public VecVec3.Unmanaged Normals;
            public VecVec4.Unmanaged Colors;
            public VecVec2.Unmanaged UvSet0;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Mesh IntoManaged()
            {
                var _managed = new Mesh();
                _managed.Transform = Transform.ToManaged();
                _managed.Texture = Texture.IntoManaged();
                _managed.Vertices = Vertices.IntoManaged();
                _managed.Triangles = Triangles.IntoManaged();
                _managed.Normals = Normals.IntoManaged();
                _managed.Colors = Colors.IntoManaged();
                _managed.UvSet0 = UvSet0.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            Texture.Dispose();
            Vertices.Dispose();
            Triangles.Dispose();
            Normals.Dispose();
            Colors.Dispose();
            UvSet0.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Mesh { ... }";
        }

        [CustomMarshaller(typeof(Mesh), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Mesh _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Mesh managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Mesh managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Mesh ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial class Node
    {
        public Utf8String Name;
        public Transform Transform;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Node : IDisposable
    {
        public Node() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.Name = Name.IntoUnmanaged();
            _unmanaged.Transform = Transform.ToUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.Name = Name.AsUnmanaged();
            _unmanaged.Transform = Transform.ToUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Utf8String.Unmanaged Name;
            public Transform.Unmanaged Transform;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Node IntoManaged()
            {
                var _managed = new Node();
                _managed.Name = Name.IntoManaged();
                _managed.Transform = Transform.ToManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            Name.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Node { ... }";
        }

        [CustomMarshaller(typeof(Node), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Node _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Node managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Node managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Node ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial class Scene
    {
        public VecNode Nodes;
        public VecMesh VisualMeshes;
        public VecMesh CollisionMeshes;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Scene : IDisposable
    {
        public Scene() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.Nodes = Nodes.IntoUnmanaged();
            _unmanaged.VisualMeshes = VisualMeshes.IntoUnmanaged();
            _unmanaged.CollisionMeshes = CollisionMeshes.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.Nodes = Nodes.AsUnmanaged();
            _unmanaged.VisualMeshes = VisualMeshes.AsUnmanaged();
            _unmanaged.CollisionMeshes = CollisionMeshes.AsUnmanaged();
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public VecNode.Unmanaged Nodes;
            public VecMesh.Unmanaged VisualMeshes;
            public VecMesh.Unmanaged CollisionMeshes;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Scene IntoManaged()
            {
                var _managed = new Scene();
                _managed.Nodes = Nodes.IntoManaged();
                _managed.VisualMeshes = VisualMeshes.IntoManaged();
                _managed.CollisionMeshes = CollisionMeshes.IntoManaged();
                return _managed;
            }
        }

        public void Dispose()
        {
            Nodes.Dispose();
            VisualMeshes.Dispose();
            CollisionMeshes.Dispose();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Scene { ... }";
        }

        [CustomMarshaller(typeof(Scene), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Scene _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Scene managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Scene managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Scene ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial struct Transform
    {
        public float[] Translation;
        public float[] Rotation;
        public float Scale;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Transform 
    {
        public Transform() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            {
                if (Translation == null) { throw new InvalidOperationException("Array 'Translation' must not be null"); }
                if (Translation.Length != 3) { throw new InvalidOperationException("Array size mismatch for 'Translation'"); }
                var src = new ReadOnlySpan<float>(Translation, 0, 3);
                var dst = new Span<float>(_unmanaged.Translation, 3);
                src.CopyTo(dst);
            }
            {
                if (Rotation == null) { throw new InvalidOperationException("Array 'Rotation' must not be null"); }
                if (Rotation.Length != 4) { throw new InvalidOperationException("Array size mismatch for 'Rotation'"); }
                var src = new ReadOnlySpan<float>(Rotation, 0, 4);
                var dst = new Span<float>(_unmanaged.Rotation, 4);
                src.CopyTo(dst);
            }
            _unmanaged.Scale = Scale;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            {
                if (Translation == null) { throw new InvalidOperationException("Array 'Translation' must not be null"); }
                if (Translation.Length != 3) { throw new InvalidOperationException("Array size mismatch for 'Translation'"); }
                var src = new ReadOnlySpan<float>(Translation, 0, 3);
                var dst = new Span<float>(_unmanaged.Translation, 3);
                src.CopyTo(dst);
            }
            {
                if (Rotation == null) { throw new InvalidOperationException("Array 'Rotation' must not be null"); }
                if (Rotation.Length != 4) { throw new InvalidOperationException("Array size mismatch for 'Rotation'"); }
                var src = new ReadOnlySpan<float>(Rotation, 0, 4);
                var dst = new Span<float>(_unmanaged.Rotation, 4);
                src.CopyTo(dst);
            }
            _unmanaged.Scale = Scale;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public fixed float Translation[3];
            public fixed float Rotation[4];
            public float Scale;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Transform ToManaged()
            {
                var _managed = new Transform();
                fixed(float* _fixed = Translation)
                {
                    _managed.Translation = new float[3];
                    var src = new ReadOnlySpan<float>(_fixed, 3);
                    var dst = new Span<float>(_managed.Translation, 0, 3);
                    src.CopyTo(dst);
                }
                fixed(float* _fixed = Rotation)
                {
                    _managed.Rotation = new float[4];
                    var src = new ReadOnlySpan<float>(_fixed, 4);
                    var dst = new Span<float>(_managed.Rotation, 0, 4);
                    src.CopyTo(dst);
                }
                _managed.Scale = Scale;
                return _managed;
            }
        }


        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Transform { ... }";
        }

        [CustomMarshaller(typeof(Transform), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Transform _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Transform managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Transform managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Transform ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial struct Triangle
    {
        public ushort v0;
        public ushort v1;
        public ushort v2;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Triangle 
    {
        public Triangle() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.v0 = v0;
            _unmanaged.v1 = v1;
            _unmanaged.v2 = v2;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.v0 = v0;
            _unmanaged.v1 = v1;
            _unmanaged.v2 = v2;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public ushort v0;
            public ushort v1;
            public ushort v2;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Triangle ToManaged()
            {
                var _managed = new Triangle();
                _managed.v0 = v0;
                _managed.v1 = v1;
                _managed.v2 = v2;
                return _managed;
            }
        }


        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Triangle { ... }";
        }

        [CustomMarshaller(typeof(Triangle), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Triangle _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Triangle managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Triangle managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Triangle ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial struct Vec2
    {
        public float x;
        public float y;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec2 
    {
        public Vec2() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.x = x;
            _unmanaged.y = y;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.x = x;
            _unmanaged.y = y;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;
            public float y;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Vec2 ToManaged()
            {
                var _managed = new Vec2();
                _managed.x = x;
                _managed.y = y;
                return _managed;
            }
        }


        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Vec2 { ... }";
        }

        [CustomMarshaller(typeof(Vec2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Vec2 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Vec2 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Vec2 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Vec2 ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial struct Vec3
    {
        public float x;
        public float y;
        public float z;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec3 
    {
        public Vec3() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.x = x;
            _unmanaged.y = y;
            _unmanaged.z = z;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.x = x;
            _unmanaged.y = y;
            _unmanaged.z = z;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;
            public float y;
            public float z;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Vec3 ToManaged()
            {
                var _managed = new Vec3();
                _managed.x = x;
                _managed.y = y;
                _managed.z = z;
                return _managed;
            }
        }


        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Vec3 { ... }";
        }

        [CustomMarshaller(typeof(Vec3), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Vec3 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Vec3 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Vec3 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Vec3 ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public partial struct Vec4
    {
        public float x;
        public float y;
        public float z;
        public float w;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec4 
    {
        public Vec4() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.x = x;
            _unmanaged.y = y;
            _unmanaged.z = z;
            _unmanaged.w = w;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal unsafe Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.x = x;
            _unmanaged.y = y;
            _unmanaged.z = z;
            _unmanaged.w = w;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;
            public float y;
            public float z;
            public float w;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe Vec4 ToManaged()
            {
                var _managed = new Vec4();
                _managed.x = x;
                _managed.y = y;
                _managed.z = z;
                _managed.w = w;
                return _managed;
            }
        }


        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "Vec4 { ... }";
        }

        [CustomMarshaller(typeof(Vec4), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Vec4 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Vec4 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Vec4 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Vec4 ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    ///Result that contains value or an error.
    public partial class ResultSceneUtf8String
    {
        uint _variant;
        Scene _Ok;
        Utf8String _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class ResultSceneUtf8String : IDisposable
    {
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedOk
        {
            internal uint _variant;
            internal Scene.Unmanaged _Ok;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Utf8String.Unmanaged _Err;
        }



        public void Dispose()
        {
            if (_variant == 0) { _Ok.Dispose(); }
            if (_variant == 1) { _Err.Dispose(); }
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedOk _Ok;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal ResultSceneUtf8String IntoManaged()
            {
                var _managed = new ResultSceneUtf8String();
                _managed._variant = _variant;
                if (_variant == 0) _managed._Ok = _Ok._Ok.IntoManaged();
                if (_variant == 1) _managed._Err = _Err._Err.IntoManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok.IntoUnmanaged();
            if (_variant == 1) _unmanaged._Err._Err = _Err.IntoUnmanaged();
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok.AsUnmanaged();
            if (_variant == 1) _unmanaged._Err._Err = _Err.AsUnmanaged();
            return _unmanaged;
        }

        public static ResultSceneUtf8String Ok(Scene value) => new() { _variant = 0, _Ok = value };
        public static ResultSceneUtf8String Err(Utf8String value) => new() { _variant = 1, _Err = value };
        public static ResultSceneUtf8String Panic => new() { _variant = 2 };
        public static ResultSceneUtf8String Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public Scene AsOk() { if (_variant != 0) { throw new InteropException(); } else { return _Ok; } }
        public Utf8String AsErr() { if (_variant != 1) { throw new InteropException(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            if (_variant == 0) return "Ok(...)";
            if (_variant == 1) return "Err(...)";
            if (_variant == 2) return "Panic";
            if (_variant == 3) return "Null";
            throw new InteropException();
        }

        [CustomMarshaller(typeof(ResultSceneUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultSceneUtf8String _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultSceneUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultSceneUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultSceneUtf8String ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    // This must be a class because we only ever want to hold on to the
    // same instance, as we overwrite fields when this is sent over the FFI
    // boundary
    public partial class VecMesh
    {
        internal IntPtr _ptr;
        internal ulong _len;
        internal ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class VecMesh : IDisposable
    {
        // An internal helper to create an empty object.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private VecMesh() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecMesh From(Span<Mesh> _data)
        {
            var _temp = new Mesh.Unmanaged[_data.Length];
            for (var i = 0; i < _data.Length; ++i)
            {
                _temp[i] = _data[i].IntoUnmanaged();
            }
            fixed (void* _data_ptr = _temp)
            {
                InteropHelper.interoptopus_vec_create((IntPtr) _data_ptr, (ulong)_data.Length, out var _out);
                return _out.IntoManaged();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecMesh Empty()
        {
            InteropHelper.interoptopus_vec_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get { if (_ptr == IntPtr.Zero) { throw new InteropException(); } else { return (int) _len; } }
        }

        public unsafe Mesh this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_ptr == IntPtr.Zero) throw new InteropException();
                var _element = Marshal.PtrToStructure<Mesh.Unmanaged>(new IntPtr(_ptr.ToInt64() + i * sizeof(Mesh.Unmanaged)));
                return _element.IntoManaged();
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            _ptr = IntPtr.Zero; // Mark this instance as moved.
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_vec_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
            _len = 0;
            _capacity = 0;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "VecMesh { ... }";
        }


        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_create_343285216292542189")]
            internal static partial long interoptopus_vec_create(IntPtr vec, ulong len, out Unmanaged rval);
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_destroy_15967035986871743817")]
            internal static partial long interoptopus_vec_destroy(Unmanaged vec);
        }

        [CustomMarshaller(typeof(VecMesh), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _ptr;
            internal ulong _len;
            internal ulong _capacity;
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecMesh IntoManaged()
            {
                var rval = new VecMesh();
                rval._len = _len;
                rval._capacity = _capacity;
                rval._ptr = _ptr;
                return rval;
            }


        }

        public ref struct Marshaller
        {
            private VecMesh _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(VecMesh managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(VecMesh managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecMesh ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }

    }

    public static class VecMeshExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static VecMesh IntoVec(this Mesh[] s) { return VecMesh.From(s); }
    }


    // This must be a class because we only ever want to hold on to the
    // same instance, as we overwrite fields when this is sent over the FFI
    // boundary
    public partial class VecNode
    {
        internal IntPtr _ptr;
        internal ulong _len;
        internal ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class VecNode : IDisposable
    {
        // An internal helper to create an empty object.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private VecNode() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecNode From(Span<Node> _data)
        {
            var _temp = new Node.Unmanaged[_data.Length];
            for (var i = 0; i < _data.Length; ++i)
            {
                _temp[i] = _data[i].IntoUnmanaged();
            }
            fixed (void* _data_ptr = _temp)
            {
                InteropHelper.interoptopus_vec_create((IntPtr) _data_ptr, (ulong)_data.Length, out var _out);
                return _out.IntoManaged();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecNode Empty()
        {
            InteropHelper.interoptopus_vec_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get { if (_ptr == IntPtr.Zero) { throw new InteropException(); } else { return (int) _len; } }
        }

        public unsafe Node this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_ptr == IntPtr.Zero) throw new InteropException();
                var _element = Marshal.PtrToStructure<Node.Unmanaged>(new IntPtr(_ptr.ToInt64() + i * sizeof(Node.Unmanaged)));
                return _element.IntoManaged();
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            _ptr = IntPtr.Zero; // Mark this instance as moved.
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_vec_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
            _len = 0;
            _capacity = 0;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "VecNode { ... }";
        }


        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_create_15232377700523984591")]
            internal static partial long interoptopus_vec_create(IntPtr vec, ulong len, out Unmanaged rval);
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_destroy_16552804768725066709")]
            internal static partial long interoptopus_vec_destroy(Unmanaged vec);
        }

        [CustomMarshaller(typeof(VecNode), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _ptr;
            internal ulong _len;
            internal ulong _capacity;
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecNode IntoManaged()
            {
                var rval = new VecNode();
                rval._len = _len;
                rval._capacity = _capacity;
                rval._ptr = _ptr;
                return rval;
            }


        }

        public ref struct Marshaller
        {
            private VecNode _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(VecNode managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(VecNode managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecNode ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }

    }

    public static class VecNodeExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static VecNode IntoVec(this Node[] s) { return VecNode.From(s); }
    }


    // This must be a class because we only ever want to hold on to the
    // same instance, as we overwrite fields when this is sent over the FFI
    // boundary
    public partial class VecTriangle
    {
        internal IntPtr _ptr;
        internal ulong _len;
        internal ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class VecTriangle : IDisposable
    {
        // An internal helper to create an empty object.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private VecTriangle() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecTriangle From(Span<Triangle> _data)
        {
            var rval = new VecTriangle();
            fixed (void* _data_ptr = _data)
            {
                InteropHelper.interoptopus_vec_create((IntPtr) _data_ptr, (ulong)_data.Length, out var _out);
                rval._len = _out._len;
                rval._capacity = _out._capacity;
                rval._ptr = _out._ptr;
            }
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecTriangle Empty()
        {
            InteropHelper.interoptopus_vec_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get { if (_ptr == IntPtr.Zero) { throw new InteropException(); } else { return (int) _len; } }
        }

        public unsafe Triangle this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_ptr == IntPtr.Zero) throw new InteropException();
                return Marshal.PtrToStructure<Triangle>(new IntPtr(_ptr.ToInt64() + i * sizeof(Triangle)));
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            _ptr = IntPtr.Zero; // Mark this instance as moved.
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_vec_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
            _len = 0;
            _capacity = 0;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "VecTriangle { ... }";
        }


        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_create_1589809616975759318")]
            internal static partial long interoptopus_vec_create(IntPtr vec, ulong len, out Unmanaged rval);
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_destroy_6823484863324545284")]
            internal static partial long interoptopus_vec_destroy(Unmanaged vec);
        }

        [CustomMarshaller(typeof(VecTriangle), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _ptr;
            internal ulong _len;
            internal ulong _capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecTriangle IntoManaged()
            {
                var rval = new VecTriangle();
                rval._len = _len;
                rval._capacity = _capacity;
                rval._ptr = _ptr;
                return rval;
            }


        }

        public ref struct Marshaller
        {
            private VecTriangle _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(VecTriangle managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(VecTriangle managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecTriangle ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public static class VecTriangleExtensions
    {
        public static VecTriangle Vec(this Triangle[] s) { return VecTriangle.From(s); }
    }


    // This must be a class because we only ever want to hold on to the
    // same instance, as we overwrite fields when this is sent over the FFI
    // boundary
    public partial class VecVec2
    {
        internal IntPtr _ptr;
        internal ulong _len;
        internal ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class VecVec2 : IDisposable
    {
        // An internal helper to create an empty object.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private VecVec2() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecVec2 From(Span<Vec2> _data)
        {
            var rval = new VecVec2();
            fixed (void* _data_ptr = _data)
            {
                InteropHelper.interoptopus_vec_create((IntPtr) _data_ptr, (ulong)_data.Length, out var _out);
                rval._len = _out._len;
                rval._capacity = _out._capacity;
                rval._ptr = _out._ptr;
            }
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecVec2 Empty()
        {
            InteropHelper.interoptopus_vec_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get { if (_ptr == IntPtr.Zero) { throw new InteropException(); } else { return (int) _len; } }
        }

        public unsafe Vec2 this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_ptr == IntPtr.Zero) throw new InteropException();
                return Marshal.PtrToStructure<Vec2>(new IntPtr(_ptr.ToInt64() + i * sizeof(Vec2)));
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            _ptr = IntPtr.Zero; // Mark this instance as moved.
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_vec_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
            _len = 0;
            _capacity = 0;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "VecVec2 { ... }";
        }


        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_create_7840575865880398252")]
            internal static partial long interoptopus_vec_create(IntPtr vec, ulong len, out Unmanaged rval);
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_destroy_5533851024978863145")]
            internal static partial long interoptopus_vec_destroy(Unmanaged vec);
        }

        [CustomMarshaller(typeof(VecVec2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _ptr;
            internal ulong _len;
            internal ulong _capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecVec2 IntoManaged()
            {
                var rval = new VecVec2();
                rval._len = _len;
                rval._capacity = _capacity;
                rval._ptr = _ptr;
                return rval;
            }


        }

        public ref struct Marshaller
        {
            private VecVec2 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(VecVec2 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(VecVec2 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecVec2 ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public static class VecVec2Extensions
    {
        public static VecVec2 Vec(this Vec2[] s) { return VecVec2.From(s); }
    }


    // This must be a class because we only ever want to hold on to the
    // same instance, as we overwrite fields when this is sent over the FFI
    // boundary
    public partial class VecVec3
    {
        internal IntPtr _ptr;
        internal ulong _len;
        internal ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class VecVec3 : IDisposable
    {
        // An internal helper to create an empty object.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private VecVec3() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecVec3 From(Span<Vec3> _data)
        {
            var rval = new VecVec3();
            fixed (void* _data_ptr = _data)
            {
                InteropHelper.interoptopus_vec_create((IntPtr) _data_ptr, (ulong)_data.Length, out var _out);
                rval._len = _out._len;
                rval._capacity = _out._capacity;
                rval._ptr = _out._ptr;
            }
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecVec3 Empty()
        {
            InteropHelper.interoptopus_vec_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get { if (_ptr == IntPtr.Zero) { throw new InteropException(); } else { return (int) _len; } }
        }

        public unsafe Vec3 this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_ptr == IntPtr.Zero) throw new InteropException();
                return Marshal.PtrToStructure<Vec3>(new IntPtr(_ptr.ToInt64() + i * sizeof(Vec3)));
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            _ptr = IntPtr.Zero; // Mark this instance as moved.
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_vec_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
            _len = 0;
            _capacity = 0;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "VecVec3 { ... }";
        }


        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_create_5844344253683601178")]
            internal static partial long interoptopus_vec_create(IntPtr vec, ulong len, out Unmanaged rval);
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_destroy_16291794870355622680")]
            internal static partial long interoptopus_vec_destroy(Unmanaged vec);
        }

        [CustomMarshaller(typeof(VecVec3), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _ptr;
            internal ulong _len;
            internal ulong _capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecVec3 IntoManaged()
            {
                var rval = new VecVec3();
                rval._len = _len;
                rval._capacity = _capacity;
                rval._ptr = _ptr;
                return rval;
            }


        }

        public ref struct Marshaller
        {
            private VecVec3 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(VecVec3 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(VecVec3 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecVec3 ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public static class VecVec3Extensions
    {
        public static VecVec3 Vec(this Vec3[] s) { return VecVec3.From(s); }
    }


    // This must be a class because we only ever want to hold on to the
    // same instance, as we overwrite fields when this is sent over the FFI
    // boundary
    public partial class VecVec4
    {
        internal IntPtr _ptr;
        internal ulong _len;
        internal ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class VecVec4 : IDisposable
    {
        // An internal helper to create an empty object.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private VecVec4() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecVec4 From(Span<Vec4> _data)
        {
            var rval = new VecVec4();
            fixed (void* _data_ptr = _data)
            {
                InteropHelper.interoptopus_vec_create((IntPtr) _data_ptr, (ulong)_data.Length, out var _out);
                rval._len = _out._len;
                rval._capacity = _out._capacity;
                rval._ptr = _out._ptr;
            }
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecVec4 Empty()
        {
            InteropHelper.interoptopus_vec_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get { if (_ptr == IntPtr.Zero) { throw new InteropException(); } else { return (int) _len; } }
        }

        public unsafe Vec4 this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_ptr == IntPtr.Zero) throw new InteropException();
                return Marshal.PtrToStructure<Vec4>(new IntPtr(_ptr.ToInt64() + i * sizeof(Vec4)));
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            _ptr = IntPtr.Zero; // Mark this instance as moved.
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_vec_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
            _len = 0;
            _capacity = 0;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public override string ToString()
        {
            return "VecVec4 { ... }";
        }


        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_create_10492799046080159930")]
            internal static partial long interoptopus_vec_create(IntPtr vec, ulong len, out Unmanaged rval);
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_destroy_13936493366709289451")]
            internal static partial long interoptopus_vec_destroy(Unmanaged vec);
        }

        [CustomMarshaller(typeof(VecVec4), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _ptr;
            internal ulong _len;
            internal ulong _capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecVec4 IntoManaged()
            {
                var rval = new VecVec4();
                rval._len = _len;
                rval._capacity = _capacity;
                rval._ptr = _ptr;
                return rval;
            }


        }

        public ref struct Marshaller
        {
            private VecVec4 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(VecVec4 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(VecVec4 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecVec4 ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() {}
        }
    }

    public static class VecVec4Extensions
    {
        public static VecVec4 Vec(this Vec4[] s) { return VecVec4.From(s); }
    }




    public class InteropException : Exception
    {
        public InteropException() : base()
        {
        }
    }
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void AsyncHelperNative(IntPtr data, IntPtr callback_data);
    public delegate void AsyncHelperDelegate(IntPtr data);

    public partial struct AsyncHelper
    {
        private AsyncHelperDelegate _managed;
        private AsyncHelperNative _native;
        private IntPtr _ptr;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct AsyncHelper : IDisposable
    {
        public AsyncHelper() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public AsyncHelper(AsyncHelperDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        void Call(IntPtr data, IntPtr _)
        {
            _managed(data);
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_ptr);
            _ptr = IntPtr.Zero;
        }

        [CustomMarshaller(typeof(AsyncHelper), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private AsyncHelper _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(AsyncHelper managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed._ptr;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public AsyncHelper ToManaged()
            {
                _managed = new AsyncHelper();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }
    }

    public delegate void AsyncCallbackCommon(IntPtr data, IntPtr callback_data);

    [StructLayout(LayoutKind.Sequential)]
    public partial struct AsyncCallbackCommonNative
    {
        internal IntPtr _ptr;
        internal IntPtr _ts;
    }
    public partial class Utf8String
    {
        IntPtr _ptr;
        ulong _len;
        ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Utf8String : IDisposable
    {
        private Utf8String() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe Utf8String From(string s)
        {
            var rval = new Utf8String();
            var source = s.AsSpan();
            Span<byte> utf8Bytes = stackalloc byte[Encoding.UTF8.GetByteCount(source)];
            var len = Encoding.UTF8.GetBytes(source, utf8Bytes);

            fixed (byte* p = utf8Bytes)
            {
                InteropHelper.interoptopus_string_create((IntPtr)p, (ulong)len, out var native);
                rval._ptr = native._ptr;
                rval._len = native._len;
                rval._capacity = native._capacity;
            }

            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe Utf8String Empty()
        {
            InteropHelper.interoptopus_string_create(IntPtr.Zero, 0, out var _out);
            return _out.IntoManaged();
        }


        public unsafe string String
        {
            get
            {
                var span = new ReadOnlySpan<byte>((byte*)_ptr, (int)_len);
                var s = Encoding.UTF8.GetString(span);
                return s;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public string IntoString()
        {
            var rval = String;
            Dispose();
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_string_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Utf8String Clone()
        {
            var _new = new Unmanaged();
            var _this = AsUnmanaged();
            InteropHelper.interoptopus_string_clone(ref _this, ref _new);
            return _new.IntoManaged();
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) { throw new Exception(); }
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            _ptr = IntPtr.Zero;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr _ptr;
            public ulong _len;
            public ulong _capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Utf8String IntoManaged()
            {
                var _managed = new Utf8String();
                _managed._ptr = _ptr;
                _managed._len = _len;
                _managed._capacity = _capacity;
                return _managed;
            }

        }

        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_create")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            
            public static partial long interoptopus_string_create(IntPtr utf8, ulong len, out Unmanaged rval);

            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_destroy")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            
            public static partial long interoptopus_string_destroy(Unmanaged utf8);

            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_clone")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            
            public static partial long interoptopus_string_clone(ref Unmanaged orig, ref Unmanaged cloned);
        }

        [CustomMarshaller(typeof(Utf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Utf8String _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Utf8String managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Utf8String managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public unsafe Unmanaged ToUnmanaged()
            {
                return _managed.IntoUnmanaged();
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public unsafe Utf8String ToManaged()
            {
                return _unmanaged.IntoManaged();
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }
    }

    public static class StringExtensions
    {
        public static Utf8String Utf8(this string s) { return Utf8String.From(s); }
    }
}
